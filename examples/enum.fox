enum Direction {
	Up,
	Down,
	Left,
	Right,
}

impl Direction {
	fn to_str(self) -> str {
		match *self {
			Self::Up => return "Up";
			Self::Down => return "Down";
			Self::Left => return "Left";
			Self::Right => return "Right";
		}
		return "";
	}
}

let dir = Direction::Left;
@prints(dir.to_str());

enum Shape {
	Circle(float),
	Square(float),
	Rectangle(float, float),
	Triangle(float, float),
}

impl Shape {
	fn to_str(self) -> str {
		match *self {
			Self::Circle(radius) => {
				@prints("Circle\nradius:");
				@printf(radius);
			}
			Self::Square(dim) => {
				@prints("Square\ndimensions:");
				@printf(dim);
			}
			Self::Rectangle(width, height) => {
				@prints("Rectangle");

				@prints("width:");
				@printf(width);

				@prints("height:");
				@printf(height);
			}
			Self::Triangle(width, height) => {
				@prints("Triangle");

				@prints("width:");
				@printf(width);

				@prints("height:");
				@printf(height);
			}
		}

		return "";
	}
}

let shape = Shape::Rectangle(3.14, 6.28);
@prints(shape.to_str());