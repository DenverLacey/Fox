enum Direction {
	Up,
	Down,
	Left,
	Right,
}

impl Direction {
	fn to_str(self) -> str {
		match *self {
			Self::Up => return "Up";
			Self::Down => return "Down";
			Self::Left => return "Left";
			Self::Right => return "Right";
		}
		return "";
	}
}

let dir = Direction::Left;
@print(dir.to_str());

enum Shape {
	Circle(float),
	Square(float),
	Rectangle(float, float),
	Triangle(float, float),
}

impl Shape {
	fn print(self) {
		match *self {
			Self::Circle(radius) => {
				@puts("Circle(");
				@puts(radius);
				@print(')');
			}
			Self::Square(dim) => {
				@puts("Square(");
				@puts(dim);
				@print(')');
			}
			Self::Rectangle(width, height) => {
				@puts("Rectangle(");

				@puts(width);
				@puts(", ");

				@puts(height);

				@print(')');
			}
			Self::Triangle(width, height) => {
				@puts("Triangle(");

				@puts(width);
				@puts(", ");

				@puts(height);
				
				@print(')');
			}
		}
	}
}

let shape = Shape::Rectangle(3.14, 6.28);
shape.print();
